
Sahara.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d00  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e0c  08002e0c  00003e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e4c  08002e4c  00004018  2**0
                  CONTENTS
  4 .ARM          00000000  08002e4c  08002e4c  00004018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e4c  08002e4c  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e4c  08002e4c  00003e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e50  08002e50  00003e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002e54  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000018  08002e6c  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002e6c  000040fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000affc  00000000  00000000  00004041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4c  00000000  00000000  0000f03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00010e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1a  00000000  00000000  00011ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173d2  00000000  00000000  000125c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000deaf  00000000  00000000  00029994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088319  00000000  00000000  00037843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfb5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003648  00000000  00000000  000bfba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c31e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002df4 	.word	0x08002df4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002df4 	.word	0x08002df4

0800014c <DisplayNumber>:
int isNthBitSet (unsigned char c, int n) {
    static unsigned char mask[] = {128, 64, 32, 16, 8, 4, 2, 1};
    return ((c & mask[n]) != 0);
}

void DisplayNumber(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	num%=100;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a23      	ldr	r2, [pc, #140]	@ (80001e4 <DisplayNumber+0x98>)
 8000158:	fb82 1203 	smull	r1, r2, r2, r3
 800015c:	1151      	asrs	r1, r2, #5
 800015e:	17da      	asrs	r2, r3, #31
 8000160:	1a8a      	subs	r2, r1, r2
 8000162:	2164      	movs	r1, #100	@ 0x64
 8000164:	fb01 f202 	mul.w	r2, r1, r2
 8000168:	1a9b      	subs	r3, r3, r2
 800016a:	607b      	str	r3, [r7, #4]
	SegData[0]=Nums[num%10];
 800016c:	6879      	ldr	r1, [r7, #4]
 800016e:	4b1e      	ldr	r3, [pc, #120]	@ (80001e8 <DisplayNumber+0x9c>)
 8000170:	fb83 2301 	smull	r2, r3, r3, r1
 8000174:	109a      	asrs	r2, r3, #2
 8000176:	17cb      	asrs	r3, r1, #31
 8000178:	1ad2      	subs	r2, r2, r3
 800017a:	4613      	mov	r3, r2
 800017c:	009b      	lsls	r3, r3, #2
 800017e:	4413      	add	r3, r2
 8000180:	005b      	lsls	r3, r3, #1
 8000182:	1aca      	subs	r2, r1, r3
 8000184:	4b19      	ldr	r3, [pc, #100]	@ (80001ec <DisplayNumber+0xa0>)
 8000186:	5c9a      	ldrb	r2, [r3, r2]
 8000188:	4b19      	ldr	r3, [pc, #100]	@ (80001f0 <DisplayNumber+0xa4>)
 800018a:	701a      	strb	r2, [r3, #0]
	SegData[1]=Nums[num/10];
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4a16      	ldr	r2, [pc, #88]	@ (80001e8 <DisplayNumber+0x9c>)
 8000190:	fb82 1203 	smull	r1, r2, r2, r3
 8000194:	1092      	asrs	r2, r2, #2
 8000196:	17db      	asrs	r3, r3, #31
 8000198:	1ad3      	subs	r3, r2, r3
 800019a:	4a14      	ldr	r2, [pc, #80]	@ (80001ec <DisplayNumber+0xa0>)
 800019c:	5cd2      	ldrb	r2, [r2, r3]
 800019e:	4b14      	ldr	r3, [pc, #80]	@ (80001f0 <DisplayNumber+0xa4>)
 80001a0:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(SRCLR_GPIO_Port, SRCLR_Pin, 0);
 80001a2:	2200      	movs	r2, #0
 80001a4:	2101      	movs	r1, #1
 80001a6:	4813      	ldr	r0, [pc, #76]	@ (80001f4 <DisplayNumber+0xa8>)
 80001a8:	f000 fee1 	bl	8000f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SRCLR_GPIO_Port, SRCLR_Pin, 1);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2101      	movs	r1, #1
 80001b0:	4810      	ldr	r0, [pc, #64]	@ (80001f4 <DisplayNumber+0xa8>)
 80001b2:	f000 fedc 	bl	8000f6e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SegData, 2, 100);
 80001b6:	2364      	movs	r3, #100	@ 0x64
 80001b8:	2202      	movs	r2, #2
 80001ba:	490d      	ldr	r1, [pc, #52]	@ (80001f0 <DisplayNumber+0xa4>)
 80001bc:	480e      	ldr	r0, [pc, #56]	@ (80001f8 <DisplayNumber+0xac>)
 80001be:	f002 f9cf 	bl	8002560 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin, 0);
 80001c2:	2200      	movs	r2, #0
 80001c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001c8:	480a      	ldr	r0, [pc, #40]	@ (80001f4 <DisplayNumber+0xa8>)
 80001ca:	f000 fed0 	bl	8000f6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001d4:	4807      	ldr	r0, [pc, #28]	@ (80001f4 <DisplayNumber+0xa8>)
 80001d6:	f000 feca 	bl	8000f6e <HAL_GPIO_WritePin>

}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	51eb851f 	.word	0x51eb851f
 80001e8:	66666667 	.word	0x66666667
 80001ec:	20000000 	.word	0x20000000
 80001f0:	200000e8 	.word	0x200000e8
 80001f4:	40010c00 	.word	0x40010c00
 80001f8:	20000048 	.word	0x20000048

080001fc <set_alarm>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void set_alarm(uint8_t min)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
    RTC_TimeTypeDef sTime = {0};  // Correct structure
 8000206:	f107 0314 	add.w	r3, r7, #20
 800020a:	2100      	movs	r1, #0
 800020c:	460a      	mov	r2, r1
 800020e:	801a      	strh	r2, [r3, #0]
 8000210:	460a      	mov	r2, r1
 8000212:	709a      	strb	r2, [r3, #2]
    RTC_AlarmTypeDef sAlarm = {0}; // Keep sAlarm for setting alarm
 8000214:	f107 030c 	add.w	r3, r7, #12
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]

    // Get the current time
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2200      	movs	r2, #0
 8000224:	4619      	mov	r1, r3
 8000226:	480f      	ldr	r0, [pc, #60]	@ (8000264 <set_alarm+0x68>)
 8000228:	f001 fcba 	bl	8001ba0 <HAL_RTC_GetTime>

    // Set the alarm time based on current time
    sAlarm.AlarmTime.Hours = sTime.Hours;
 800022c:	7d3b      	ldrb	r3, [r7, #20]
 800022e:	733b      	strb	r3, [r7, #12]
    sAlarm.AlarmTime.Minutes = sTime.Minutes;
 8000230:	7d7b      	ldrb	r3, [r7, #21]
 8000232:	737b      	strb	r3, [r7, #13]
    sAlarm.AlarmTime.Seconds = sTime.Seconds + min;
 8000234:	7dba      	ldrb	r2, [r7, #22]
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4413      	add	r3, r2
 800023a:	b2db      	uxtb	r3, r3
 800023c:	73bb      	strb	r3, [r7, #14]
	sAlarm.Alarm = RTC_ALARM_A;
 800023e:	2300      	movs	r3, #0
 8000240:	613b      	str	r3, [r7, #16]
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000242:	f107 030c 	add.w	r3, r7, #12
 8000246:	2200      	movs	r2, #0
 8000248:	4619      	mov	r1, r3
 800024a:	4806      	ldr	r0, [pc, #24]	@ (8000264 <set_alarm+0x68>)
 800024c:	f001 fd80 	bl	8001d50 <HAL_RTC_SetAlarm_IT>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <set_alarm+0x5e>
	{
		Error_Handler();
 8000256:	f000 fa17 	bl	8000688 <Error_Handler>
	}
}
 800025a:	bf00      	nop
 800025c:	3718      	adds	r7, #24
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000034 	.word	0x20000034

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fb50 	bl	8000910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f880 	bl	8000374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f000 f986 	bl	8000584 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000278:	f000 f8f6 	bl	8000468 <MX_SPI1_Init>
  MX_TIM1_Init();
 800027c:	f000 f92a 	bl	80004d4 <MX_TIM1_Init>
  MX_RTC_Init();
 8000280:	f000 f8d6 	bl	8000430 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000284:	213c      	movs	r1, #60	@ 0x3c
 8000286:	4833      	ldr	r0, [pc, #204]	@ (8000354 <main+0xec>)
 8000288:	f002 fc09 	bl	8002a9e <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim1, 32767);
 800028c:	4b31      	ldr	r3, [pc, #196]	@ (8000354 <main+0xec>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000294:	625a      	str	r2, [r3, #36]	@ 0x24
  EncRaw = __HAL_TIM_GET_COUNTER(&htim1);
 8000296:	4b2f      	ldr	r3, [pc, #188]	@ (8000354 <main+0xec>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800029c:	4a2e      	ldr	r2, [pc, #184]	@ (8000358 <main+0xf0>)
 800029e:	6013      	str	r3, [r2, #0]
  OldEncRaw=EncRaw;
 80002a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000358 <main+0xf0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a2d      	ldr	r2, [pc, #180]	@ (800035c <main+0xf4>)
 80002a6:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 80002a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ac:	f000 fb92 	bl	80009d4 <HAL_Delay>
  while (1)
  {
	  if(timeState==0){
 80002b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000360 <main+0xf8>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d1fb      	bne.n	80002b0 <main+0x48>
	  HAL_GPIO_WritePin(GPIOB, Fan_Relay_Pin, 0);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2180      	movs	r1, #128	@ 0x80
 80002bc:	4829      	ldr	r0, [pc, #164]	@ (8000364 <main+0xfc>)
 80002be:	f000 fe56 	bl	8000f6e <HAL_GPIO_WritePin>
	  EncRaw = __HAL_TIM_GET_COUNTER(&htim1);
 80002c2:	4b24      	ldr	r3, [pc, #144]	@ (8000354 <main+0xec>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002c8:	4a23      	ldr	r2, [pc, #140]	@ (8000358 <main+0xf0>)
 80002ca:	6013      	str	r3, [r2, #0]
	  if (EncRaw>=3+OldEncRaw){
 80002cc:	4b23      	ldr	r3, [pc, #140]	@ (800035c <main+0xf4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1cda      	adds	r2, r3, #3
 80002d2:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <main+0xf0>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d809      	bhi.n	80002ee <main+0x86>
		  count+=1;
 80002da:	4b23      	ldr	r3, [pc, #140]	@ (8000368 <main+0x100>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4b21      	ldr	r3, [pc, #132]	@ (8000368 <main+0x100>)
 80002e4:	701a      	strb	r2, [r3, #0]
		  OldEncRaw=EncRaw;
 80002e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000358 <main+0xf0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a1c      	ldr	r2, [pc, #112]	@ (800035c <main+0xf4>)
 80002ec:	6013      	str	r3, [r2, #0]
	  }
	  if (EncRaw<=OldEncRaw-3){
 80002ee:	4b1b      	ldr	r3, [pc, #108]	@ (800035c <main+0xf4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	1eda      	subs	r2, r3, #3
 80002f4:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <main+0xf0>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d30d      	bcc.n	8000318 <main+0xb0>
		  if(count!=0){
 80002fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000368 <main+0x100>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d005      	beq.n	8000310 <main+0xa8>
			  count-=1;
 8000304:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <main+0x100>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	3b01      	subs	r3, #1
 800030a:	b2da      	uxtb	r2, r3
 800030c:	4b16      	ldr	r3, [pc, #88]	@ (8000368 <main+0x100>)
 800030e:	701a      	strb	r2, [r3, #0]
		  }
		  OldEncRaw=EncRaw;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <main+0xf0>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a11      	ldr	r2, [pc, #68]	@ (800035c <main+0xf4>)
 8000316:	6013      	str	r3, [r2, #0]

	  }
	  DisplayNumber(count);
 8000318:	4b13      	ldr	r3, [pc, #76]	@ (8000368 <main+0x100>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff15 	bl	800014c <DisplayNumber>
	  if (HAL_GPIO_ReadPin(EncBut_GPIO_Port, EncBut_Pin)==1){
 8000322:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000326:	4811      	ldr	r0, [pc, #68]	@ (800036c <main+0x104>)
 8000328:	f000 fe0a 	bl	8000f40 <HAL_GPIO_ReadPin>
 800032c:	4603      	mov	r3, r0
 800032e:	2b01      	cmp	r3, #1
 8000330:	d1be      	bne.n	80002b0 <main+0x48>
		  timeState=1;
 8000332:	4b0b      	ldr	r3, [pc, #44]	@ (8000360 <main+0xf8>)
 8000334:	2201      	movs	r2, #1
 8000336:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, Fan_Relay_Pin, 1);
 8000338:	2201      	movs	r2, #1
 800033a:	2180      	movs	r1, #128	@ 0x80
 800033c:	4809      	ldr	r0, [pc, #36]	@ (8000364 <main+0xfc>)
 800033e:	f000 fe16 	bl	8000f6e <HAL_GPIO_WritePin>
		  time = count;
 8000342:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <main+0x100>)
 8000344:	781a      	ldrb	r2, [r3, #0]
 8000346:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <main+0x108>)
 8000348:	701a      	strb	r2, [r3, #0]
		  set_alarm(1);
 800034a:	2001      	movs	r0, #1
 800034c:	f7ff ff56 	bl	80001fc <set_alarm>
	  if(timeState==0){
 8000350:	e7ae      	b.n	80002b0 <main+0x48>
 8000352:	bf00      	nop
 8000354:	200000a0 	.word	0x200000a0
 8000358:	200000f0 	.word	0x200000f0
 800035c:	200000f4 	.word	0x200000f4
 8000360:	200000ec 	.word	0x200000ec
 8000364:	40010c00 	.word	0x40010c00
 8000368:	200000ea 	.word	0x200000ea
 800036c:	40010800 	.word	0x40010800
 8000370:	200000eb 	.word	0x200000eb

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b094      	sub	sp, #80	@ 0x50
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800037e:	2228      	movs	r2, #40	@ 0x28
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f002 fd0a 	bl	8002d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80003a4:	2309      	movs	r3, #9
 80003a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b2:	2301      	movs	r3, #1
 80003b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003b6:	2301      	movs	r3, #1
 80003b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ba:	2302      	movs	r3, #2
 80003bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 fdf2 	bl	8000fb8 <HAL_RCC_OscConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003da:	f000 f955 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003de:	230f      	movs	r3, #15
 80003e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80003ea:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80003ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	2102      	movs	r1, #2
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 f85e 	bl	80014bc <HAL_RCC_ClockConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000406:	f000 f93f 	bl	8000688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800040a:	2301      	movs	r3, #1
 800040c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800040e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000412:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	4618      	mov	r0, r3
 8000418:	f001 f9ca 	bl	80017b0 <HAL_RCCEx_PeriphCLKConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000422:	f000 f931 	bl	8000688 <Error_Handler>
  }
}
 8000426:	bf00      	nop
 8000428:	3750      	adds	r7, #80	@ 0x50
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000434:	4b0a      	ldr	r3, [pc, #40]	@ (8000460 <MX_RTC_Init+0x30>)
 8000436:	4a0b      	ldr	r2, [pc, #44]	@ (8000464 <MX_RTC_Init+0x34>)
 8000438:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <MX_RTC_Init+0x30>)
 800043c:	f04f 32ff 	mov.w	r2, #4294967295
 8000440:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000442:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <MX_RTC_Init+0x30>)
 8000444:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000448:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800044a:	4805      	ldr	r0, [pc, #20]	@ (8000460 <MX_RTC_Init+0x30>)
 800044c:	f001 fb1c 	bl	8001a88 <HAL_RTC_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000456:	f000 f917 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000034 	.word	0x20000034
 8000464:	40002800 	.word	0x40002800

08000468 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800046c:	4b17      	ldr	r3, [pc, #92]	@ (80004cc <MX_SPI1_Init+0x64>)
 800046e:	4a18      	ldr	r2, [pc, #96]	@ (80004d0 <MX_SPI1_Init+0x68>)
 8000470:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000472:	4b16      	ldr	r3, [pc, #88]	@ (80004cc <MX_SPI1_Init+0x64>)
 8000474:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000478:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800047a:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <MX_SPI1_Init+0x64>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000480:	4b12      	ldr	r3, [pc, #72]	@ (80004cc <MX_SPI1_Init+0x64>)
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000486:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <MX_SPI1_Init+0x64>)
 8000488:	2202      	movs	r2, #2
 800048a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800048c:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <MX_SPI1_Init+0x64>)
 800048e:	2200      	movs	r2, #0
 8000490:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <MX_SPI1_Init+0x64>)
 8000494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000498:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800049a:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <MX_SPI1_Init+0x64>)
 800049c:	2218      	movs	r2, #24
 800049e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80004a0:	4b0a      	ldr	r3, [pc, #40]	@ (80004cc <MX_SPI1_Init+0x64>)
 80004a2:	2280      	movs	r2, #128	@ 0x80
 80004a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004a6:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <MX_SPI1_Init+0x64>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ac:	4b07      	ldr	r3, [pc, #28]	@ (80004cc <MX_SPI1_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004b2:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <MX_SPI1_Init+0x64>)
 80004b4:	220a      	movs	r2, #10
 80004b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004b8:	4804      	ldr	r0, [pc, #16]	@ (80004cc <MX_SPI1_Init+0x64>)
 80004ba:	f001 ffcd 	bl	8002458 <HAL_SPI_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004c4:	f000 f8e0 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000048 	.word	0x20000048
 80004d0:	40013000 	.word	0x40013000

080004d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	@ 0x30
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004da:	f107 030c 	add.w	r3, r7, #12
 80004de:	2224      	movs	r2, #36	@ 0x24
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fc5a 	bl	8002d9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004f0:	4b22      	ldr	r3, [pc, #136]	@ (800057c <MX_TIM1_Init+0xa8>)
 80004f2:	4a23      	ldr	r2, [pc, #140]	@ (8000580 <MX_TIM1_Init+0xac>)
 80004f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004f6:	4b21      	ldr	r3, [pc, #132]	@ (800057c <MX_TIM1_Init+0xa8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fc:	4b1f      	ldr	r3, [pc, #124]	@ (800057c <MX_TIM1_Init+0xa8>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000502:	4b1e      	ldr	r3, [pc, #120]	@ (800057c <MX_TIM1_Init+0xa8>)
 8000504:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000508:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050a:	4b1c      	ldr	r3, [pc, #112]	@ (800057c <MX_TIM1_Init+0xa8>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000510:	4b1a      	ldr	r3, [pc, #104]	@ (800057c <MX_TIM1_Init+0xa8>)
 8000512:	2200      	movs	r2, #0
 8000514:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000516:	4b19      	ldr	r3, [pc, #100]	@ (800057c <MX_TIM1_Init+0xa8>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800051c:	2303      	movs	r3, #3
 800051e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000520:	2300      	movs	r3, #0
 8000522:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000524:	2301      	movs	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800052c:	230a      	movs	r3, #10
 800052e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000530:	2300      	movs	r3, #0
 8000532:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000534:	2301      	movs	r3, #1
 8000536:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800053c:	230a      	movs	r3, #10
 800053e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	4619      	mov	r1, r3
 8000546:	480d      	ldr	r0, [pc, #52]	@ (800057c <MX_TIM1_Init+0xa8>)
 8000548:	f002 fa07 	bl	800295a <HAL_TIM_Encoder_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000552:	f000 f899 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	4619      	mov	r1, r3
 8000562:	4806      	ldr	r0, [pc, #24]	@ (800057c <MX_TIM1_Init+0xa8>)
 8000564:	f002 fbbc 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800056e:	f000 f88b 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000572:	bf00      	nop
 8000574:	3730      	adds	r7, #48	@ 0x30
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200000a0 	.word	0x200000a0
 8000580:	40012c00 	.word	0x40012c00

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000598:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <MX_GPIO_Init+0xb4>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a26      	ldr	r2, [pc, #152]	@ (8000638 <MX_GPIO_Init+0xb4>)
 800059e:	f043 0320 	orr.w	r3, r3, #32
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b24      	ldr	r3, [pc, #144]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0320 	and.w	r3, r3, #32
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a20      	ldr	r2, [pc, #128]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0304 	and.w	r3, r3, #4
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a1a      	ldr	r2, [pc, #104]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005ce:	f043 0308 	orr.w	r3, r3, #8
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0308 	and.w	r3, r3, #8
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SRCLR_Pin|RCLK_Pin, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f240 4101 	movw	r1, #1025	@ 0x401
 80005e6:	4815      	ldr	r0, [pc, #84]	@ (800063c <MX_GPIO_Init+0xb8>)
 80005e8:	f000 fcc1 	bl	8000f6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SRCLK_Pin|SER_Pin|Fan_Relay_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f640 0182 	movw	r1, #2178	@ 0x882
 80005f2:	4812      	ldr	r0, [pc, #72]	@ (800063c <MX_GPIO_Init+0xb8>)
 80005f4:	f000 fcbb 	bl	8000f6e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SRCLR_Pin SRCLK_Pin RCLK_Pin SER_Pin
                           Fan_Relay_Pin */
  GPIO_InitStruct.Pin = SRCLR_Pin|SRCLK_Pin|RCLK_Pin|SER_Pin
 80005f8:	f640 4383 	movw	r3, #3203	@ 0xc83
 80005fc:	613b      	str	r3, [r7, #16]
                          |Fan_Relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2302      	movs	r3, #2
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	4619      	mov	r1, r3
 8000610:	480a      	ldr	r0, [pc, #40]	@ (800063c <MX_GPIO_Init+0xb8>)
 8000612:	f000 fb11 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncBut_Pin */
  GPIO_InitStruct.Pin = EncBut_Pin;
 8000616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EncBut_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4619      	mov	r1, r3
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_GPIO_Init+0xbc>)
 800062c:	f000 fb04 	bl	8000c38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	40010c00 	.word	0x40010c00
 8000640:	40010800 	.word	0x40010800

08000644 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  DisplayNumber(time);
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <HAL_RTC_AlarmAEventCallback+0x3c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fd7b 	bl	800014c <DisplayNumber>
  if(time==0){
 8000656:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d103      	bne.n	8000666 <HAL_RTC_AlarmAEventCallback+0x22>
	  timeState=0;
 800065e:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <HAL_RTC_AlarmAEventCallback+0x40>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
  }else{
	  time-=1;
	  set_alarm(1);
  }

}
 8000664:	e008      	b.n	8000678 <HAL_RTC_AlarmAEventCallback+0x34>
	  time-=1;
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	3b01      	subs	r3, #1
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8000670:	701a      	strb	r2, [r3, #0]
	  set_alarm(1);
 8000672:	2001      	movs	r0, #1
 8000674:	f7ff fdc2 	bl	80001fc <set_alarm>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000eb 	.word	0x200000eb
 8000684:	200000ec 	.word	0x200000ec

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <Error_Handler+0x8>

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800069a:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <HAL_MspInit+0x5c>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a14      	ldr	r2, [pc, #80]	@ (80006f0 <HAL_MspInit+0x5c>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <HAL_MspInit+0x5c>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <HAL_MspInit+0x5c>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a0e      	ldr	r2, [pc, #56]	@ (80006f0 <HAL_MspInit+0x5c>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <HAL_MspInit+0x5c>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <HAL_MspInit+0x60>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	4a04      	ldr	r2, [pc, #16]	@ (80006f4 <HAL_MspInit+0x60>)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010000 	.word	0x40010000

080006f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <HAL_RTC_MspInit+0x4c>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d118      	bne.n	800073c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800070a:	f000 fc49 	bl	8000fa0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <HAL_RTC_MspInit+0x50>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a0d      	ldr	r2, [pc, #52]	@ (8000748 <HAL_RTC_MspInit+0x50>)
 8000714:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <HAL_RTC_MspInit+0x50>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <HAL_RTC_MspInit+0x54>)
 8000728:	2201      	movs	r2, #1
 800072a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	2029      	movs	r0, #41	@ 0x29
 8000732:	f000 fa4a 	bl	8000bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000736:	2029      	movs	r0, #41	@ 0x29
 8000738:	f000 fa63 	bl	8000c02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40002800 	.word	0x40002800
 8000748:	40021000 	.word	0x40021000
 800074c:	4242043c 	.word	0x4242043c

08000750 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a15      	ldr	r2, [pc, #84]	@ (80007c0 <HAL_SPI_MspInit+0x70>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d123      	bne.n	80007b8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000770:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <HAL_SPI_MspInit+0x74>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a13      	ldr	r2, [pc, #76]	@ (80007c4 <HAL_SPI_MspInit+0x74>)
 8000776:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <HAL_SPI_MspInit+0x74>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <HAL_SPI_MspInit+0x74>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a0d      	ldr	r2, [pc, #52]	@ (80007c4 <HAL_SPI_MspInit+0x74>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <HAL_SPI_MspInit+0x74>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007a0:	23a0      	movs	r3, #160	@ 0xa0
 80007a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <HAL_SPI_MspInit+0x78>)
 80007b4:	f000 fa40 	bl	8000c38 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40013000 	.word	0x40013000
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800

080007cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a16      	ldr	r2, [pc, #88]	@ (8000840 <HAL_TIM_Encoder_MspInit+0x74>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d124      	bne.n	8000836 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007ec:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <HAL_TIM_Encoder_MspInit+0x78>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a14      	ldr	r2, [pc, #80]	@ (8000844 <HAL_TIM_Encoder_MspInit+0x78>)
 80007f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <HAL_TIM_Encoder_MspInit+0x78>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <HAL_TIM_Encoder_MspInit+0x78>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a0e      	ldr	r2, [pc, #56]	@ (8000844 <HAL_TIM_Encoder_MspInit+0x78>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <HAL_TIM_Encoder_MspInit+0x78>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800081c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	@ (8000848 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000832:	f000 fa01 	bl	8000c38 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40012c00 	.word	0x40012c00
 8000844:	40021000 	.word	0x40021000
 8000848:	40010800 	.word	0x40010800

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <NMI_Handler+0x4>

08000854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <MemManage_Handler+0x4>

08000864 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <UsageFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f87e 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80008a8:	4802      	ldr	r0, [pc, #8]	@ (80008b4 <RTC_Alarm_IRQHandler+0x10>)
 80008aa:	f001 fb09 	bl	8001ec0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000034 	.word	0x20000034

080008b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c4:	f7ff fff8 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ca:	490c      	ldr	r1, [pc, #48]	@ (80008fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000900 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a09      	ldr	r2, [pc, #36]	@ (8000904 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008e0:	4c09      	ldr	r4, [pc, #36]	@ (8000908 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f002 fa5d 	bl	8002dac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008f2:	f7ff fcb9 	bl	8000268 <main>
  bx lr
 80008f6:	4770      	bx	lr
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000900:	08002e54 	.word	0x08002e54
  ldr r2, =_sbss
 8000904:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000908:	200000fc 	.word	0x200000fc

0800090c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC1_2_IRQHandler>
	...

08000910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <HAL_Init+0x28>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	@ (8000938 <HAL_Init+0x28>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f947 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	200f      	movs	r0, #15
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff feb2 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40022000 	.word	0x40022000

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f95f 	bl	8000c1e <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f000 f927 	bl	8000bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	@ (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20000014 	.word	0x20000014
 8000998:	20000010 	.word	0x20000010

0800099c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <HAL_IncTick+0x1c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <HAL_IncTick+0x20>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a03      	ldr	r2, [pc, #12]	@ (80009bc <HAL_IncTick+0x20>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000014 	.word	0x20000014
 80009bc:	200000f8 	.word	0x200000f8

080009c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b02      	ldr	r3, [pc, #8]	@ (80009d0 <HAL_GetTick+0x10>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	200000f8 	.word	0x200000f8

080009d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff fff0 	bl	80009c0 <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <HAL_Delay+0x44>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffe0 	bl	80009c0 <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000014 	.word	0x20000014

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db0b      	blt.n	8000aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 021f 	and.w	r2, r3, #31
 8000a98:	4906      	ldr	r1, [pc, #24]	@ (8000ab4 <__NVIC_EnableIRQ+0x34>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	@ (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	@ (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	@ 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	@ 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b80:	d301      	bcc.n	8000b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00f      	b.n	8000ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <SysTick_Config+0x40>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8e:	210f      	movs	r1, #15
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f7ff ff90 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <SysTick_Config+0x40>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <SysTick_Config+0x40>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	e000e010 	.word	0xe000e010

08000bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff2d 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bdc:	f7ff ff42 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff ff90 	bl	8000b0c <NVIC_EncodePriority>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff5f 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff35 	bl	8000a80 <__NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffa2 	bl	8000b70 <SysTick_Config>
 8000c2c:	4603      	mov	r3, r0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b08b      	sub	sp, #44	@ 0x2c
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4a:	e169      	b.n	8000f20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	f040 8158 	bne.w	8000f1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ed8 <HAL_GPIO_Init+0x2a0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d05e      	beq.n	8000d32 <HAL_GPIO_Init+0xfa>
 8000c74:	4a98      	ldr	r2, [pc, #608]	@ (8000ed8 <HAL_GPIO_Init+0x2a0>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d875      	bhi.n	8000d66 <HAL_GPIO_Init+0x12e>
 8000c7a:	4a98      	ldr	r2, [pc, #608]	@ (8000edc <HAL_GPIO_Init+0x2a4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d058      	beq.n	8000d32 <HAL_GPIO_Init+0xfa>
 8000c80:	4a96      	ldr	r2, [pc, #600]	@ (8000edc <HAL_GPIO_Init+0x2a4>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d86f      	bhi.n	8000d66 <HAL_GPIO_Init+0x12e>
 8000c86:	4a96      	ldr	r2, [pc, #600]	@ (8000ee0 <HAL_GPIO_Init+0x2a8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d052      	beq.n	8000d32 <HAL_GPIO_Init+0xfa>
 8000c8c:	4a94      	ldr	r2, [pc, #592]	@ (8000ee0 <HAL_GPIO_Init+0x2a8>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d869      	bhi.n	8000d66 <HAL_GPIO_Init+0x12e>
 8000c92:	4a94      	ldr	r2, [pc, #592]	@ (8000ee4 <HAL_GPIO_Init+0x2ac>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d04c      	beq.n	8000d32 <HAL_GPIO_Init+0xfa>
 8000c98:	4a92      	ldr	r2, [pc, #584]	@ (8000ee4 <HAL_GPIO_Init+0x2ac>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d863      	bhi.n	8000d66 <HAL_GPIO_Init+0x12e>
 8000c9e:	4a92      	ldr	r2, [pc, #584]	@ (8000ee8 <HAL_GPIO_Init+0x2b0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d046      	beq.n	8000d32 <HAL_GPIO_Init+0xfa>
 8000ca4:	4a90      	ldr	r2, [pc, #576]	@ (8000ee8 <HAL_GPIO_Init+0x2b0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d85d      	bhi.n	8000d66 <HAL_GPIO_Init+0x12e>
 8000caa:	2b12      	cmp	r3, #18
 8000cac:	d82a      	bhi.n	8000d04 <HAL_GPIO_Init+0xcc>
 8000cae:	2b12      	cmp	r3, #18
 8000cb0:	d859      	bhi.n	8000d66 <HAL_GPIO_Init+0x12e>
 8000cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb8 <HAL_GPIO_Init+0x80>)
 8000cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb8:	08000d33 	.word	0x08000d33
 8000cbc:	08000d0d 	.word	0x08000d0d
 8000cc0:	08000d1f 	.word	0x08000d1f
 8000cc4:	08000d61 	.word	0x08000d61
 8000cc8:	08000d67 	.word	0x08000d67
 8000ccc:	08000d67 	.word	0x08000d67
 8000cd0:	08000d67 	.word	0x08000d67
 8000cd4:	08000d67 	.word	0x08000d67
 8000cd8:	08000d67 	.word	0x08000d67
 8000cdc:	08000d67 	.word	0x08000d67
 8000ce0:	08000d67 	.word	0x08000d67
 8000ce4:	08000d67 	.word	0x08000d67
 8000ce8:	08000d67 	.word	0x08000d67
 8000cec:	08000d67 	.word	0x08000d67
 8000cf0:	08000d67 	.word	0x08000d67
 8000cf4:	08000d67 	.word	0x08000d67
 8000cf8:	08000d67 	.word	0x08000d67
 8000cfc:	08000d15 	.word	0x08000d15
 8000d00:	08000d29 	.word	0x08000d29
 8000d04:	4a79      	ldr	r2, [pc, #484]	@ (8000eec <HAL_GPIO_Init+0x2b4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d013      	beq.n	8000d32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d0a:	e02c      	b.n	8000d66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	623b      	str	r3, [r7, #32]
          break;
 8000d12:	e029      	b.n	8000d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	623b      	str	r3, [r7, #32]
          break;
 8000d1c:	e024      	b.n	8000d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	3308      	adds	r3, #8
 8000d24:	623b      	str	r3, [r7, #32]
          break;
 8000d26:	e01f      	b.n	8000d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	330c      	adds	r3, #12
 8000d2e:	623b      	str	r3, [r7, #32]
          break;
 8000d30:	e01a      	b.n	8000d68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	623b      	str	r3, [r7, #32]
          break;
 8000d3e:	e013      	b.n	8000d68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d105      	bne.n	8000d54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69fa      	ldr	r2, [r7, #28]
 8000d50:	611a      	str	r2, [r3, #16]
          break;
 8000d52:	e009      	b.n	8000d68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d54:	2308      	movs	r3, #8
 8000d56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	615a      	str	r2, [r3, #20]
          break;
 8000d5e:	e003      	b.n	8000d68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
          break;
 8000d64:	e000      	b.n	8000d68 <HAL_GPIO_Init+0x130>
          break;
 8000d66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	2bff      	cmp	r3, #255	@ 0xff
 8000d6c:	d801      	bhi.n	8000d72 <HAL_GPIO_Init+0x13a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	e001      	b.n	8000d76 <HAL_GPIO_Init+0x13e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3304      	adds	r3, #4
 8000d76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	2bff      	cmp	r3, #255	@ 0xff
 8000d7c:	d802      	bhi.n	8000d84 <HAL_GPIO_Init+0x14c>
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	e002      	b.n	8000d8a <HAL_GPIO_Init+0x152>
 8000d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d86:	3b08      	subs	r3, #8
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	210f      	movs	r1, #15
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	fa01 f303 	lsl.w	r3, r1, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	6a39      	ldr	r1, [r7, #32]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	431a      	orrs	r2, r3
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000db8:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef0 <HAL_GPIO_Init+0x2b8>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a4c      	ldr	r2, [pc, #304]	@ (8000ef0 <HAL_GPIO_Init+0x2b8>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef0 <HAL_GPIO_Init+0x2b8>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dd0:	4a48      	ldr	r2, [pc, #288]	@ (8000ef4 <HAL_GPIO_Init+0x2bc>)
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ddc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	220f      	movs	r2, #15
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a40      	ldr	r2, [pc, #256]	@ (8000ef8 <HAL_GPIO_Init+0x2c0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d013      	beq.n	8000e24 <HAL_GPIO_Init+0x1ec>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a3f      	ldr	r2, [pc, #252]	@ (8000efc <HAL_GPIO_Init+0x2c4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d00d      	beq.n	8000e20 <HAL_GPIO_Init+0x1e8>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a3e      	ldr	r2, [pc, #248]	@ (8000f00 <HAL_GPIO_Init+0x2c8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d007      	beq.n	8000e1c <HAL_GPIO_Init+0x1e4>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f04 <HAL_GPIO_Init+0x2cc>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d101      	bne.n	8000e18 <HAL_GPIO_Init+0x1e0>
 8000e14:	2303      	movs	r3, #3
 8000e16:	e006      	b.n	8000e26 <HAL_GPIO_Init+0x1ee>
 8000e18:	2304      	movs	r3, #4
 8000e1a:	e004      	b.n	8000e26 <HAL_GPIO_Init+0x1ee>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e002      	b.n	8000e26 <HAL_GPIO_Init+0x1ee>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <HAL_GPIO_Init+0x1ee>
 8000e24:	2300      	movs	r3, #0
 8000e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e28:	f002 0203 	and.w	r2, r2, #3
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	4093      	lsls	r3, r2
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e36:	492f      	ldr	r1, [pc, #188]	@ (8000ef4 <HAL_GPIO_Init+0x2bc>)
 8000e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e50:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	492c      	ldr	r1, [pc, #176]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	608b      	str	r3, [r1, #8]
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	4928      	ldr	r1, [pc, #160]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000e68:	4013      	ands	r3, r2
 8000e6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e78:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	4922      	ldr	r1, [pc, #136]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60cb      	str	r3, [r1, #12]
 8000e84:	e006      	b.n	8000e94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e86:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	491e      	ldr	r1, [pc, #120]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ea0:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	4918      	ldr	r1, [pc, #96]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	604b      	str	r3, [r1, #4]
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eae:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4914      	ldr	r1, [pc, #80]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	4013      	ands	r3, r2
 8000eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d021      	beq.n	8000f0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	490e      	ldr	r1, [pc, #56]	@ (8000f08 <HAL_GPIO_Init+0x2d0>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	600b      	str	r3, [r1, #0]
 8000ed4:	e021      	b.n	8000f1a <HAL_GPIO_Init+0x2e2>
 8000ed6:	bf00      	nop
 8000ed8:	10320000 	.word	0x10320000
 8000edc:	10310000 	.word	0x10310000
 8000ee0:	10220000 	.word	0x10220000
 8000ee4:	10210000 	.word	0x10210000
 8000ee8:	10120000 	.word	0x10120000
 8000eec:	10110000 	.word	0x10110000
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010000 	.word	0x40010000
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40010c00 	.word	0x40010c00
 8000f00:	40011000 	.word	0x40011000
 8000f04:	40011400 	.word	0x40011400
 8000f08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <HAL_GPIO_Init+0x304>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	4909      	ldr	r1, [pc, #36]	@ (8000f3c <HAL_GPIO_Init+0x304>)
 8000f16:	4013      	ands	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f26:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f47f ae8e 	bne.w	8000c4c <HAL_GPIO_Init+0x14>
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	372c      	adds	r7, #44	@ 0x2c
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	40010400 	.word	0x40010400

08000f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e001      	b.n	8000f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	460b      	mov	r3, r1
 8000f78:	807b      	strh	r3, [r7, #2]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f7e:	787b      	ldrb	r3, [r7, #1]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f84:	887a      	ldrh	r2, [r7, #2]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f8a:	e003      	b.n	8000f94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	041a      	lsls	r2, r3, #16
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	611a      	str	r2, [r3, #16]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	420e0020 	.word	0x420e0020

08000fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e272      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8087 	beq.w	80010e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fd8:	4b92      	ldr	r3, [pc, #584]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d00c      	beq.n	8000ffe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe4:	4b8f      	ldr	r3, [pc, #572]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	d112      	bne.n	8001016 <HAL_RCC_OscConfig+0x5e>
 8000ff0:	4b8c      	ldr	r3, [pc, #560]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ffc:	d10b      	bne.n	8001016 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffe:	4b89      	ldr	r3, [pc, #548]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d06c      	beq.n	80010e4 <HAL_RCC_OscConfig+0x12c>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d168      	bne.n	80010e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e24c      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800101e:	d106      	bne.n	800102e <HAL_RCC_OscConfig+0x76>
 8001020:	4b80      	ldr	r3, [pc, #512]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a7f      	ldr	r2, [pc, #508]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	e02e      	b.n	800108c <HAL_RCC_OscConfig+0xd4>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10c      	bne.n	8001050 <HAL_RCC_OscConfig+0x98>
 8001036:	4b7b      	ldr	r3, [pc, #492]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a7a      	ldr	r2, [pc, #488]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 800103c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	4b78      	ldr	r3, [pc, #480]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a77      	ldr	r2, [pc, #476]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001048:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e01d      	b.n	800108c <HAL_RCC_OscConfig+0xd4>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001058:	d10c      	bne.n	8001074 <HAL_RCC_OscConfig+0xbc>
 800105a:	4b72      	ldr	r3, [pc, #456]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a71      	ldr	r2, [pc, #452]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b6f      	ldr	r3, [pc, #444]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a6e      	ldr	r2, [pc, #440]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e00b      	b.n	800108c <HAL_RCC_OscConfig+0xd4>
 8001074:	4b6b      	ldr	r3, [pc, #428]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a6a      	ldr	r2, [pc, #424]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 800107a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b68      	ldr	r3, [pc, #416]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a67      	ldr	r2, [pc, #412]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800108a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d013      	beq.n	80010bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fc94 	bl	80009c0 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fc90 	bl	80009c0 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	@ 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e200      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0xe4>
 80010ba:	e014      	b.n	80010e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fc80 	bl	80009c0 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fc7c 	bl	80009c0 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	@ 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e1ec      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d6:	4b53      	ldr	r3, [pc, #332]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x10c>
 80010e2:	e000      	b.n	80010e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d063      	beq.n	80011ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010fe:	4b49      	ldr	r3, [pc, #292]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	2b08      	cmp	r3, #8
 8001108:	d11c      	bne.n	8001144 <HAL_RCC_OscConfig+0x18c>
 800110a:	4b46      	ldr	r3, [pc, #280]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d116      	bne.n	8001144 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001116:	4b43      	ldr	r3, [pc, #268]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <HAL_RCC_OscConfig+0x176>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e1c0      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112e:	4b3d      	ldr	r3, [pc, #244]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4939      	ldr	r1, [pc, #228]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	e03a      	b.n	80011ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800114c:	4b36      	ldr	r3, [pc, #216]	@ (8001228 <HAL_RCC_OscConfig+0x270>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fc35 	bl	80009c0 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff fc31 	bl	80009c0 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e1a1      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116c:	4b2d      	ldr	r3, [pc, #180]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	4927      	ldr	r1, [pc, #156]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
 800118c:	e015      	b.n	80011ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118e:	4b26      	ldr	r3, [pc, #152]	@ (8001228 <HAL_RCC_OscConfig+0x270>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fc14 	bl	80009c0 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fc10 	bl	80009c0 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e180      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d03a      	beq.n	800123c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d019      	beq.n	8001202 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <HAL_RCC_OscConfig+0x274>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d4:	f7ff fbf4 	bl	80009c0 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fbf0 	bl	80009c0 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e160      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 faba 	bl	8001774 <RCC_Delay>
 8001200:	e01c      	b.n	800123c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <HAL_RCC_OscConfig+0x274>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001208:	f7ff fbda 	bl	80009c0 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800120e:	e00f      	b.n	8001230 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001210:	f7ff fbd6 	bl	80009c0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d908      	bls.n	8001230 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e146      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	42420000 	.word	0x42420000
 800122c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001230:	4b92      	ldr	r3, [pc, #584]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1e9      	bne.n	8001210 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80a6 	beq.w	8001396 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124e:	4b8b      	ldr	r3, [pc, #556]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10d      	bne.n	8001276 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b88      	ldr	r3, [pc, #544]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a87      	ldr	r2, [pc, #540]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b85      	ldr	r3, [pc, #532]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001272:	2301      	movs	r3, #1
 8001274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001276:	4b82      	ldr	r3, [pc, #520]	@ (8001480 <HAL_RCC_OscConfig+0x4c8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127e:	2b00      	cmp	r3, #0
 8001280:	d118      	bne.n	80012b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001282:	4b7f      	ldr	r3, [pc, #508]	@ (8001480 <HAL_RCC_OscConfig+0x4c8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a7e      	ldr	r2, [pc, #504]	@ (8001480 <HAL_RCC_OscConfig+0x4c8>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800128e:	f7ff fb97 	bl	80009c0 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001296:	f7ff fb93 	bl	80009c0 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b64      	cmp	r3, #100	@ 0x64
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e103      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a8:	4b75      	ldr	r3, [pc, #468]	@ (8001480 <HAL_RCC_OscConfig+0x4c8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d106      	bne.n	80012ca <HAL_RCC_OscConfig+0x312>
 80012bc:	4b6f      	ldr	r3, [pc, #444]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4a6e      	ldr	r2, [pc, #440]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6213      	str	r3, [r2, #32]
 80012c8:	e02d      	b.n	8001326 <HAL_RCC_OscConfig+0x36e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x334>
 80012d2:	4b6a      	ldr	r3, [pc, #424]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4a69      	ldr	r2, [pc, #420]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	6213      	str	r3, [r2, #32]
 80012de:	4b67      	ldr	r3, [pc, #412]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4a66      	ldr	r2, [pc, #408]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	f023 0304 	bic.w	r3, r3, #4
 80012e8:	6213      	str	r3, [r2, #32]
 80012ea:	e01c      	b.n	8001326 <HAL_RCC_OscConfig+0x36e>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	d10c      	bne.n	800130e <HAL_RCC_OscConfig+0x356>
 80012f4:	4b61      	ldr	r3, [pc, #388]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4a60      	ldr	r2, [pc, #384]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	f043 0304 	orr.w	r3, r3, #4
 80012fe:	6213      	str	r3, [r2, #32]
 8001300:	4b5e      	ldr	r3, [pc, #376]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4a5d      	ldr	r2, [pc, #372]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6213      	str	r3, [r2, #32]
 800130c:	e00b      	b.n	8001326 <HAL_RCC_OscConfig+0x36e>
 800130e:	4b5b      	ldr	r3, [pc, #364]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4a5a      	ldr	r2, [pc, #360]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	6213      	str	r3, [r2, #32]
 800131a:	4b58      	ldr	r3, [pc, #352]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	4a57      	ldr	r2, [pc, #348]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001320:	f023 0304 	bic.w	r3, r3, #4
 8001324:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d015      	beq.n	800135a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff fb47 	bl	80009c0 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001334:	e00a      	b.n	800134c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001336:	f7ff fb43 	bl	80009c0 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001344:	4293      	cmp	r3, r2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e0b1      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134c:	4b4b      	ldr	r3, [pc, #300]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0ee      	beq.n	8001336 <HAL_RCC_OscConfig+0x37e>
 8001358:	e014      	b.n	8001384 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fb31 	bl	80009c0 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001360:	e00a      	b.n	8001378 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001362:	f7ff fb2d 	bl	80009c0 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001370:	4293      	cmp	r3, r2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e09b      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001378:	4b40      	ldr	r3, [pc, #256]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1ee      	bne.n	8001362 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d105      	bne.n	8001396 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138a:	4b3c      	ldr	r3, [pc, #240]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a3b      	ldr	r2, [pc, #236]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001390:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001394:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8087 	beq.w	80014ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013a0:	4b36      	ldr	r3, [pc, #216]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d061      	beq.n	8001470 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d146      	bne.n	8001442 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b4:	4b33      	ldr	r3, [pc, #204]	@ (8001484 <HAL_RCC_OscConfig+0x4cc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fb01 	bl	80009c0 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fafd 	bl	80009c0 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e06d      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f0      	bne.n	80013c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013e8:	d108      	bne.n	80013fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ea:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	4921      	ldr	r1, [pc, #132]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013fc:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a19      	ldr	r1, [r3, #32]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140c:	430b      	orrs	r3, r1
 800140e:	491b      	ldr	r1, [pc, #108]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_RCC_OscConfig+0x4cc>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fad1 	bl	80009c0 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff facd 	bl	80009c0 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e03d      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x46a>
 8001440:	e035      	b.n	80014ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <HAL_RCC_OscConfig+0x4cc>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff faba 	bl	80009c0 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff fab6 	bl	80009c0 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e026      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_RCC_OscConfig+0x4c4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x498>
 800146e:	e01e      	b.n	80014ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d107      	bne.n	8001488 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e019      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
 800147c:	40021000 	.word	0x40021000
 8001480:	40007000 	.word	0x40007000
 8001484:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_RCC_OscConfig+0x500>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	429a      	cmp	r2, r3
 800149a:	d106      	bne.n	80014aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0d0      	b.n	8001672 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014d0:	4b6a      	ldr	r3, [pc, #424]	@ (800167c <HAL_RCC_ClockConfig+0x1c0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d910      	bls.n	8001500 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014de:	4b67      	ldr	r3, [pc, #412]	@ (800167c <HAL_RCC_ClockConfig+0x1c0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 0207 	bic.w	r2, r3, #7
 80014e6:	4965      	ldr	r1, [pc, #404]	@ (800167c <HAL_RCC_ClockConfig+0x1c0>)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ee:	4b63      	ldr	r3, [pc, #396]	@ (800167c <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0b8      	b.n	8001672 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001518:	4b59      	ldr	r3, [pc, #356]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a58      	ldr	r2, [pc, #352]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001522:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001530:	4b53      	ldr	r3, [pc, #332]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4a52      	ldr	r2, [pc, #328]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 8001536:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800153a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800153c:	4b50      	ldr	r3, [pc, #320]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	494d      	ldr	r1, [pc, #308]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d040      	beq.n	80015dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	4b47      	ldr	r3, [pc, #284]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d115      	bne.n	800159a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e07f      	b.n	8001672 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d107      	bne.n	800158a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157a:	4b41      	ldr	r3, [pc, #260]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d109      	bne.n	800159a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e073      	b.n	8001672 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158a:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e06b      	b.n	8001672 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800159a:	4b39      	ldr	r3, [pc, #228]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f023 0203 	bic.w	r2, r3, #3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4936      	ldr	r1, [pc, #216]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015ac:	f7ff fa08 	bl	80009c0 <HAL_GetTick>
 80015b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b4:	f7ff fa04 	bl	80009c0 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e053      	b.n	8001672 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 020c 	and.w	r2, r3, #12
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	429a      	cmp	r2, r3
 80015da:	d1eb      	bne.n	80015b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015dc:	4b27      	ldr	r3, [pc, #156]	@ (800167c <HAL_RCC_ClockConfig+0x1c0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d210      	bcs.n	800160c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	4b24      	ldr	r3, [pc, #144]	@ (800167c <HAL_RCC_ClockConfig+0x1c0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 0207 	bic.w	r2, r3, #7
 80015f2:	4922      	ldr	r1, [pc, #136]	@ (800167c <HAL_RCC_ClockConfig+0x1c0>)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d001      	beq.n	800160c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e032      	b.n	8001672 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d008      	beq.n	800162a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001618:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4916      	ldr	r1, [pc, #88]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	4313      	orrs	r3, r2
 8001628:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d009      	beq.n	800164a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001636:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	490e      	ldr	r1, [pc, #56]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800164a:	f000 f821 	bl	8001690 <HAL_RCC_GetSysClockFreq>
 800164e:	4602      	mov	r2, r0
 8001650:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	490a      	ldr	r1, [pc, #40]	@ (8001684 <HAL_RCC_ClockConfig+0x1c8>)
 800165c:	5ccb      	ldrb	r3, [r1, r3]
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	4a09      	ldr	r2, [pc, #36]	@ (8001688 <HAL_RCC_ClockConfig+0x1cc>)
 8001664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <HAL_RCC_ClockConfig+0x1d0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff f966 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40022000 	.word	0x40022000
 8001680:	40021000 	.word	0x40021000
 8001684:	08002e0c 	.word	0x08002e0c
 8001688:	2000000c 	.word	0x2000000c
 800168c:	20000010 	.word	0x20000010

08001690 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x94>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d002      	beq.n	80016c0 <HAL_RCC_GetSysClockFreq+0x30>
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d003      	beq.n	80016c6 <HAL_RCC_GetSysClockFreq+0x36>
 80016be:	e027      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016c0:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x98>)
 80016c2:	613b      	str	r3, [r7, #16]
      break;
 80016c4:	e027      	b.n	8001716 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	0c9b      	lsrs	r3, r3, #18
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	4a17      	ldr	r2, [pc, #92]	@ (800172c <HAL_RCC_GetSysClockFreq+0x9c>)
 80016d0:	5cd3      	ldrb	r3, [r2, r3]
 80016d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d010      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x94>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	0c5b      	lsrs	r3, r3, #17
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	4a11      	ldr	r2, [pc, #68]	@ (8001730 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
 80016ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x98>)
 80016f2:	fb03 f202 	mul.w	r2, r3, r2
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e004      	b.n	800170a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a0c      	ldr	r2, [pc, #48]	@ (8001734 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001704:	fb02 f303 	mul.w	r3, r2, r3
 8001708:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	613b      	str	r3, [r7, #16]
      break;
 800170e:	e002      	b.n	8001716 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x98>)
 8001712:	613b      	str	r3, [r7, #16]
      break;
 8001714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001716:	693b      	ldr	r3, [r7, #16]
}
 8001718:	4618      	mov	r0, r3
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000
 8001728:	007a1200 	.word	0x007a1200
 800172c:	08002e24 	.word	0x08002e24
 8001730:	08002e34 	.word	0x08002e34
 8001734:	003d0900 	.word	0x003d0900

08001738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800173c:	4b02      	ldr	r3, [pc, #8]	@ (8001748 <HAL_RCC_GetHCLKFreq+0x10>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	2000000c 	.word	0x2000000c

0800174c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001750:	f7ff fff2 	bl	8001738 <HAL_RCC_GetHCLKFreq>
 8001754:	4602      	mov	r2, r0
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	0adb      	lsrs	r3, r3, #11
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	4903      	ldr	r1, [pc, #12]	@ (8001770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001762:	5ccb      	ldrb	r3, [r1, r3]
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	08002e1c 	.word	0x08002e1c

08001774 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <RCC_Delay+0x34>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <RCC_Delay+0x38>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	0a5b      	lsrs	r3, r3, #9
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001790:	bf00      	nop
  }
  while (Delay --);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	60fa      	str	r2, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f9      	bne.n	8001790 <RCC_Delay+0x1c>
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	2000000c 	.word	0x2000000c
 80017ac:	10624dd3 	.word	0x10624dd3

080017b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d07d      	beq.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10d      	bne.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	61d3      	str	r3, [r2, #28]
 80017e8:	4b49      	ldr	r3, [pc, #292]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f4:	2301      	movs	r3, #1
 80017f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b46      	ldr	r3, [pc, #280]	@ (8001914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d118      	bne.n	8001836 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001804:	4b43      	ldr	r3, [pc, #268]	@ (8001914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a42      	ldr	r2, [pc, #264]	@ (8001914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001810:	f7ff f8d6 	bl	80009c0 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	e008      	b.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001818:	f7ff f8d2 	bl	80009c0 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	@ 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e06d      	b.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182a:	4b3a      	ldr	r3, [pc, #232]	@ (8001914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001836:	4b36      	ldr	r3, [pc, #216]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800183e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d02e      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d027      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001854:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800185c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800185e:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001864:	4b2c      	ldr	r3, [pc, #176]	@ (8001918 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800186a:	4a29      	ldr	r2, [pc, #164]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d014      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff f8a1 	bl	80009c0 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	e00a      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff f89d 	bl	80009c0 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e036      	b.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001898:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ee      	beq.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4917      	ldr	r1, [pc, #92]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	4a13      	ldr	r2, [pc, #76]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	490b      	ldr	r1, [pc, #44]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018f2:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	4904      	ldr	r1, [pc, #16]	@ (8001910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	40007000 	.word	0x40007000
 8001918:	42420440 	.word	0x42420440

0800191c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b10      	cmp	r3, #16
 800193c:	d00a      	beq.n	8001954 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b10      	cmp	r3, #16
 8001942:	f200 808a 	bhi.w	8001a5a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d045      	beq.n	80019d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d075      	beq.n	8001a3e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001952:	e082      	b.n	8001a5a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001954:	4b46      	ldr	r3, [pc, #280]	@ (8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800195a:	4b45      	ldr	r3, [pc, #276]	@ (8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d07b      	beq.n	8001a5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	0c9b      	lsrs	r3, r3, #18
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	4a41      	ldr	r2, [pc, #260]	@ (8001a74 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001970:	5cd3      	ldrb	r3, [r2, r3]
 8001972:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d015      	beq.n	80019aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800197e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	0c5b      	lsrs	r3, r3, #17
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	4a3b      	ldr	r2, [pc, #236]	@ (8001a78 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800198a:	5cd3      	ldrb	r3, [r2, r3]
 800198c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00d      	beq.n	80019b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001998:	4a38      	ldr	r2, [pc, #224]	@ (8001a7c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	e004      	b.n	80019b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4a34      	ldr	r2, [pc, #208]	@ (8001a80 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80019b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019c0:	d102      	bne.n	80019c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	61bb      	str	r3, [r7, #24]
      break;
 80019c6:	e04a      	b.n	8001a5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001a84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	61bb      	str	r3, [r7, #24]
      break;
 80019d6:	e042      	b.n	8001a5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80019d8:	4b25      	ldr	r3, [pc, #148]	@ (8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019e8:	d108      	bne.n	80019fc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80019f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	e01f      	b.n	8001a3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a06:	d109      	bne.n	8001a1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001a14:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	e00f      	b.n	8001a3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001a26:	d11c      	bne.n	8001a62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001a28:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d016      	beq.n	8001a62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001a34:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8001a38:	61bb      	str	r3, [r7, #24]
      break;
 8001a3a:	e012      	b.n	8001a62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001a3c:	e011      	b.n	8001a62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001a3e:	f7ff fe85 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	0b9b      	lsrs	r3, r3, #14
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	61bb      	str	r3, [r7, #24]
      break;
 8001a58:	e004      	b.n	8001a64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001a5a:	bf00      	nop
 8001a5c:	e002      	b.n	8001a64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001a5e:	bf00      	nop
 8001a60:	e000      	b.n	8001a64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001a62:	bf00      	nop
    }
  }
  return (frequency);
 8001a64:	69bb      	ldr	r3, [r7, #24]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	08002e38 	.word	0x08002e38
 8001a78:	08002e48 	.word	0x08002e48
 8001a7c:	007a1200 	.word	0x007a1200
 8001a80:	003d0900 	.word	0x003d0900
 8001a84:	aaaaaaab 	.word	0xaaaaaaab

08001a88 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07a      	b.n	8001b94 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7c5b      	ldrb	r3, [r3, #17]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d105      	bne.n	8001ab4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7fe fe22 	bl	80006f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fa2a 	bl	8001f14 <HAL_RTC_WaitForSynchro>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2204      	movs	r2, #4
 8001aca:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e061      	b.n	8001b94 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fae3 	bl	800209c <RTC_EnterInitMode>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d004      	beq.n	8001ae6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2204      	movs	r2, #4
 8001ae0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e056      	b.n	8001b94 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0207 	bic.w	r2, r2, #7
 8001af4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001afe:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <HAL_RTC_Init+0x114>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a26      	ldr	r2, [pc, #152]	@ (8001b9c <HAL_RTC_Init+0x114>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001b0a:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <HAL_RTC_Init+0x114>)
 8001b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	4921      	ldr	r1, [pc, #132]	@ (8001b9c <HAL_RTC_Init+0x114>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d003      	beq.n	8001b2e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e00e      	b.n	8001b4c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f7ff fef4 	bl	800191c <HAL_RCCEx_GetPeriphCLKFreq>
 8001b34:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d104      	bne.n	8001b46 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2204      	movs	r2, #4
 8001b40:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e026      	b.n	8001b94 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	0c1a      	lsrs	r2, r3, #16
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f002 020f 	and.w	r2, r2, #15
 8001b58:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	b292      	uxth	r2, r2
 8001b62:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fac1 	bl	80020ec <RTC_ExitInitMode>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2204      	movs	r2, #4
 8001b74:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00c      	b.n	8001b94 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001b92:	2300      	movs	r3, #0
  }
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40006c00 	.word	0x40006c00

08001ba0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_RTC_GetTime+0x28>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b5      	b.n	8001d38 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0ac      	b.n	8001d38 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f9c5 	bl	8001f6e <RTC_ReadTimeCounter>
 8001be4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4a55      	ldr	r2, [pc, #340]	@ (8001d40 <HAL_RTC_GetTime+0x1a0>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0adb      	lsrs	r3, r3, #11
 8001bf0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4b52      	ldr	r3, [pc, #328]	@ (8001d40 <HAL_RTC_GetTime+0x1a0>)
 8001bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8001bfa:	0adb      	lsrs	r3, r3, #11
 8001bfc:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	4a4f      	ldr	r2, [pc, #316]	@ (8001d44 <HAL_RTC_GetTime+0x1a4>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	095b      	lsrs	r3, r3, #5
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	4a4a      	ldr	r2, [pc, #296]	@ (8001d40 <HAL_RTC_GetTime+0x1a0>)
 8001c18:	fba2 1203 	umull	r1, r2, r2, r3
 8001c1c:	0ad2      	lsrs	r2, r2, #11
 8001c1e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8001c22:	fb01 f202 	mul.w	r2, r1, r2
 8001c26:	1a9a      	subs	r2, r3, r2
 8001c28:	4b46      	ldr	r3, [pc, #280]	@ (8001d44 <HAL_RTC_GetTime+0x1a4>)
 8001c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c2e:	0959      	lsrs	r1, r3, #5
 8001c30:	460b      	mov	r3, r1
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	1a5b      	subs	r3, r3, r1
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	1ad1      	subs	r1, r2, r3
 8001c3a:	b2ca      	uxtb	r2, r1
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b17      	cmp	r3, #23
 8001c44:	d955      	bls.n	8001cf2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4a3f      	ldr	r2, [pc, #252]	@ (8001d48 <HAL_RTC_GetTime+0x1a8>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001c52:	6939      	ldr	r1, [r7, #16]
 8001c54:	4b3c      	ldr	r3, [pc, #240]	@ (8001d48 <HAL_RTC_GetTime+0x1a8>)
 8001c56:	fba3 2301 	umull	r2, r3, r3, r1
 8001c5a:	091a      	lsrs	r2, r3, #4
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	1aca      	subs	r2, r1, r3
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f9d5 	bl	800201c <RTC_ReadAlarmCounter>
 8001c72:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7a:	d008      	beq.n	8001c8e <HAL_RTC_GetTime+0xee>
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d904      	bls.n	8001c8e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	e002      	b.n	8001c94 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	4a2d      	ldr	r2, [pc, #180]	@ (8001d4c <HAL_RTC_GetTime+0x1ac>)
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f992 	bl	8001fce <RTC_WriteTimeCounter>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e041      	b.n	8001d38 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cba:	d00c      	beq.n	8001cd6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001cc4:	69f9      	ldr	r1, [r7, #28]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f9c1 	bl	800204e <RTC_WriteAlarmCounter>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e030      	b.n	8001d38 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001cd6:	69f9      	ldr	r1, [r7, #28]
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f9b8 	bl	800204e <RTC_WriteAlarmCounter>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e027      	b.n	8001d38 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8001ce8:	6979      	ldr	r1, [r7, #20]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 fa60 	bl	80021b0 <RTC_DateUpdate>
 8001cf0:	e003      	b.n	8001cfa <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01a      	beq.n	8001d36 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fa19 	bl	800213c <RTC_ByteToBcd2>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	785b      	ldrb	r3, [r3, #1]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fa10 	bl	800213c <RTC_ByteToBcd2>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	789b      	ldrb	r3, [r3, #2]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fa07 	bl	800213c <RTC_ByteToBcd2>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	91a2b3c5 	.word	0x91a2b3c5
 8001d44:	88888889 	.word	0x88888889
 8001d48:	aaaaaaab 	.word	0xaaaaaaab
 8001d4c:	00015180 	.word	0x00015180

08001d50 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b089      	sub	sp, #36	@ 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2100      	movs	r1, #0
 8001d66:	460a      	mov	r2, r1
 8001d68:	801a      	strh	r2, [r3, #0]
 8001d6a:	460a      	mov	r2, r1
 8001d6c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <HAL_RTC_SetAlarm_IT+0x2a>
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e099      	b.n	8001eb2 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	7c1b      	ldrb	r3, [r3, #16]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_RTC_SetAlarm_IT+0x3a>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e093      	b.n	8001eb2 <HAL_RTC_SetAlarm_IT+0x162>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2202      	movs	r2, #2
 8001d94:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff fefe 	bl	8001ba0 <HAL_RTC_GetTime>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e081      	b.n	8001eb2 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001dae:	7d3b      	ldrb	r3, [r7, #20]
 8001db0:	461a      	mov	r2, r3
 8001db2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8001db6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8001dba:	7d7b      	ldrb	r3, [r7, #21]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	1a5b      	subs	r3, r3, r1
 8001dc4:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001dc6:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8001dc8:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001dca:	4413      	add	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d113      	bne.n	8001dfc <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8001dde:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	785b      	ldrb	r3, [r3, #1]
 8001de6:	4619      	mov	r1, r3
 8001de8:	460b      	mov	r3, r1
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	1a5b      	subs	r3, r3, r1
 8001dee:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001df0:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001df6:	4413      	add	r3, r2
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e01e      	b.n	8001e3a <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 f9b8 	bl	8002176 <RTC_Bcd2ToByte>
 8001e06:	4603      	mov	r3, r0
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8001e0e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 f9ad 	bl	8002176 <RTC_Bcd2ToByte>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4613      	mov	r3, r2
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001e28:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	789b      	ldrb	r3, [r3, #2]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f9a1 	bl	8002176 <RTC_Bcd2ToByte>
 8001e34:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001e36:	4423      	add	r3, r4
 8001e38:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d205      	bcs.n	8001e4e <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8001e48:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001e4c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001e4e:	69f9      	ldr	r1, [r7, #28]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 f8fc 	bl	800204e <RTC_WriteAlarmCounter>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2204      	movs	r2, #4
 8001e60:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e022      	b.n	8001eb2 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0202 	bic.w	r2, r2, #2
 8001e7a:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0202 	orr.w	r2, r2, #2
 8001e8a:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_RTC_SetAlarm_IT+0x16c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <HAL_RTC_SetAlarm_IT+0x16c>)
 8001e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e96:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <HAL_RTC_SetAlarm_IT+0x16c>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4a07      	ldr	r2, [pc, #28]	@ (8001ebc <HAL_RTC_SetAlarm_IT+0x16c>)
 8001e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea2:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
  }
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	@ 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d011      	beq.n	8001efa <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7fe fbad 	bl	8000644 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0202 	bic.w	r2, r2, #2
 8001ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001efa:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_RTC_AlarmIRQHandler+0x50>)
 8001efc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f00:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	745a      	strb	r2, [r3, #17]
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e01d      	b.n	8001f66 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0208 	bic.w	r2, r2, #8
 8001f38:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001f3a:	f7fe fd41 	bl	80009c0 <HAL_GetTick>
 8001f3e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001f40:	e009      	b.n	8001f56 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001f42:	f7fe fd3d 	bl	80009c0 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f50:	d901      	bls.n	8001f56 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e007      	b.n	8001f66 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ee      	beq.n	8001f42 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b087      	sub	sp, #28
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	827b      	strh	r3, [r7, #18]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	823b      	strh	r3, [r7, #16]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001f9e:	8a7a      	ldrh	r2, [r7, #18]
 8001fa0:	8a3b      	ldrh	r3, [r7, #16]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d008      	beq.n	8001fb8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001fa6:	8a3b      	ldrh	r3, [r7, #16]
 8001fa8:	041a      	lsls	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e004      	b.n	8001fc2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001fb8:	8a7b      	ldrh	r3, [r7, #18]
 8001fba:	041a      	lsls	r2, r3, #16
 8001fbc:	89fb      	ldrh	r3, [r7, #14]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001fc2:	697b      	ldr	r3, [r7, #20]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f85d 	bl	800209c <RTC_EnterInitMode>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e011      	b.n	8002012 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	0c12      	lsrs	r2, r2, #16
 8001ff6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	b292      	uxth	r2, r2
 8002000:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f872 	bl	80020ec <RTC_ExitInitMode>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	81fb      	strh	r3, [r7, #14]
 8002028:	2300      	movs	r3, #0
 800202a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800203c:	89fb      	ldrh	r3, [r7, #14]
 800203e:	041a      	lsls	r2, r3, #16
 8002040:	89bb      	ldrh	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f81d 	bl	800209c <RTC_EnterInitMode>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e011      	b.n	8002092 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	0c12      	lsrs	r2, r2, #16
 8002076:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b292      	uxth	r2, r2
 8002080:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f832 	bl	80020ec <RTC_ExitInitMode>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80020a8:	f7fe fc8a 	bl	80009c0 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020ae:	e009      	b.n	80020c4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020b0:	f7fe fc86 	bl	80009c0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020be:	d901      	bls.n	80020c4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e00f      	b.n	80020e4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0ee      	beq.n	80020b0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0210 	orr.w	r2, r2, #16
 80020e0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0210 	bic.w	r2, r2, #16
 8002106:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002108:	f7fe fc5a 	bl	80009c0 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800210e:	e009      	b.n	8002124 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002110:	f7fe fc56 	bl	80009c0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800211e:	d901      	bls.n	8002124 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e007      	b.n	8002134 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0ee      	beq.n	8002110 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800214a:	e005      	b.n	8002158 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3301      	adds	r3, #1
 8002150:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	3b0a      	subs	r3, #10
 8002156:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	2b09      	cmp	r3, #9
 800215c:	d8f6      	bhi.n	800214c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	b2da      	uxtb	r2, r3
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	4313      	orrs	r3, r2
 800216a:	b2db      	uxtb	r3, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002176:	b480      	push	{r7}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	b2db      	uxtb	r3, r3
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7bdb      	ldrb	r3, [r3, #15]
 80021ce:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	7b5b      	ldrb	r3, [r3, #13]
 80021d4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7b9b      	ldrb	r3, [r3, #14]
 80021da:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	e06f      	b.n	80022c2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d011      	beq.n	800220c <RTC_DateUpdate+0x5c>
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d00e      	beq.n	800220c <RTC_DateUpdate+0x5c>
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d00b      	beq.n	800220c <RTC_DateUpdate+0x5c>
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b07      	cmp	r3, #7
 80021f8:	d008      	beq.n	800220c <RTC_DateUpdate+0x5c>
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d005      	beq.n	800220c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b0a      	cmp	r3, #10
 8002204:	d002      	beq.n	800220c <RTC_DateUpdate+0x5c>
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d117      	bne.n	800223c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b1e      	cmp	r3, #30
 8002210:	d803      	bhi.n	800221a <RTC_DateUpdate+0x6a>
      {
        day++;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3301      	adds	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002218:	e050      	b.n	80022bc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	2b0c      	cmp	r3, #12
 800221e:	d005      	beq.n	800222c <RTC_DateUpdate+0x7c>
        {
          month++;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	3301      	adds	r3, #1
 8002224:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002226:	2301      	movs	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800222a:	e047      	b.n	80022bc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800222c:	2301      	movs	r3, #1
 800222e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002230:	2301      	movs	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
          year++;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3301      	adds	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800223a:	e03f      	b.n	80022bc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b04      	cmp	r3, #4
 8002240:	d008      	beq.n	8002254 <RTC_DateUpdate+0xa4>
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b06      	cmp	r3, #6
 8002246:	d005      	beq.n	8002254 <RTC_DateUpdate+0xa4>
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b09      	cmp	r3, #9
 800224c:	d002      	beq.n	8002254 <RTC_DateUpdate+0xa4>
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b0b      	cmp	r3, #11
 8002252:	d10c      	bne.n	800226e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b1d      	cmp	r3, #29
 8002258:	d803      	bhi.n	8002262 <RTC_DateUpdate+0xb2>
      {
        day++;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002260:	e02c      	b.n	80022bc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	3301      	adds	r3, #1
 8002266:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002268:	2301      	movs	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800226c:	e026      	b.n	80022bc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d123      	bne.n	80022bc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b1b      	cmp	r3, #27
 8002278:	d803      	bhi.n	8002282 <RTC_DateUpdate+0xd2>
      {
        day++;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3301      	adds	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	e01c      	b.n	80022bc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b1c      	cmp	r3, #28
 8002286:	d111      	bne.n	80022ac <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	b29b      	uxth	r3, r3
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f839 	bl	8002304 <RTC_IsLeapYear>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3301      	adds	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	e00d      	b.n	80022bc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	3301      	adds	r3, #1
 80022a4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80022a6:	2301      	movs	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e007      	b.n	80022bc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b1d      	cmp	r3, #29
 80022b0:	d104      	bne.n	80022bc <RTC_DateUpdate+0x10c>
      {
        month++;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	3301      	adds	r3, #1
 80022b6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80022b8:	2301      	movs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	3301      	adds	r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d38b      	bcc.n	80021e2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	6978      	ldr	r0, [r7, #20]
 80022ee:	f000 f83b 	bl	8002368 <RTC_WeekDayNum>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	731a      	strb	r2, [r3, #12]
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	e01d      	b.n	800235a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	4a10      	ldr	r2, [pc, #64]	@ (8002364 <RTC_IsLeapYear+0x60>)
 8002322:	fba2 1203 	umull	r1, r2, r2, r3
 8002326:	0952      	lsrs	r2, r2, #5
 8002328:	2164      	movs	r1, #100	@ 0x64
 800232a:	fb01 f202 	mul.w	r2, r1, r2
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002336:	2301      	movs	r3, #1
 8002338:	e00f      	b.n	800235a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	4a09      	ldr	r2, [pc, #36]	@ (8002364 <RTC_IsLeapYear+0x60>)
 800233e:	fba2 1203 	umull	r1, r2, r2, r3
 8002342:	09d2      	lsrs	r2, r2, #7
 8002344:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002348:	fb01 f202 	mul.w	r2, r1, r2
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002358:	2300      	movs	r3, #0
  }
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	51eb851f 	.word	0x51eb851f

08002368 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	70fb      	strb	r3, [r7, #3]
 8002374:	4613      	mov	r3, r2
 8002376:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002386:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d82d      	bhi.n	80023ea <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	4a2c      	ldr	r2, [pc, #176]	@ (800244c <RTC_WeekDayNum+0xe4>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	085a      	lsrs	r2, r3, #1
 80023a2:	78bb      	ldrb	r3, [r7, #2]
 80023a4:	441a      	add	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	441a      	add	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	441a      	add	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	4926      	ldr	r1, [pc, #152]	@ (8002450 <RTC_WeekDayNum+0xe8>)
 80023b8:	fba1 1303 	umull	r1, r3, r1, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	1ad2      	subs	r2, r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	4922      	ldr	r1, [pc, #136]	@ (8002450 <RTC_WeekDayNum+0xe8>)
 80023c6:	fba1 1303 	umull	r1, r3, r1, r3
 80023ca:	09db      	lsrs	r3, r3, #7
 80023cc:	4413      	add	r3, r2
 80023ce:	1d1a      	adds	r2, r3, #4
 80023d0:	4b20      	ldr	r3, [pc, #128]	@ (8002454 <RTC_WeekDayNum+0xec>)
 80023d2:	fba3 1302 	umull	r1, r3, r3, r2
 80023d6:	1ad1      	subs	r1, r2, r3
 80023d8:	0849      	lsrs	r1, r1, #1
 80023da:	440b      	add	r3, r1
 80023dc:	0899      	lsrs	r1, r3, #2
 80023de:	460b      	mov	r3, r1
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a5b      	subs	r3, r3, r1
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e029      	b.n	800243e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	4a15      	ldr	r2, [pc, #84]	@ (800244c <RTC_WeekDayNum+0xe4>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	085a      	lsrs	r2, r3, #1
 80023fe:	78bb      	ldrb	r3, [r7, #2]
 8002400:	441a      	add	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	441a      	add	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	441a      	add	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4910      	ldr	r1, [pc, #64]	@ (8002450 <RTC_WeekDayNum+0xe8>)
 8002410:	fba1 1303 	umull	r1, r3, r1, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	1ad2      	subs	r2, r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	490d      	ldr	r1, [pc, #52]	@ (8002450 <RTC_WeekDayNum+0xe8>)
 800241c:	fba1 1303 	umull	r1, r3, r1, r3
 8002420:	09db      	lsrs	r3, r3, #7
 8002422:	4413      	add	r3, r2
 8002424:	1c9a      	adds	r2, r3, #2
 8002426:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <RTC_WeekDayNum+0xec>)
 8002428:	fba3 1302 	umull	r1, r3, r3, r2
 800242c:	1ad1      	subs	r1, r2, r3
 800242e:	0849      	lsrs	r1, r1, #1
 8002430:	440b      	add	r3, r1
 8002432:	0899      	lsrs	r1, r3, #2
 8002434:	460b      	mov	r3, r1
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	1a5b      	subs	r3, r3, r1
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	b2db      	uxtb	r3, r3
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	38e38e39 	.word	0x38e38e39
 8002450:	51eb851f 	.word	0x51eb851f
 8002454:	24924925 	.word	0x24924925

08002458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e076      	b.n	8002558 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800247a:	d009      	beq.n	8002490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
 8002482:	e005      	b.n	8002490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe f950 	bl	8000750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002514:	ea42 0103 	orr.w	r1, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	0c1a      	lsrs	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f002 0204 	and.w	r2, r2, #4
 8002536:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69da      	ldr	r2, [r3, #28]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002546:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002570:	f7fe fa26 	bl	80009c0 <HAL_GetTick>
 8002574:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002586:	2302      	movs	r3, #2
 8002588:	e12a      	b.n	80027e0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_SPI_Transmit+0x36>
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e122      	b.n	80027e0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_SPI_Transmit+0x48>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e11b      	b.n	80027e0 <HAL_SPI_Transmit+0x280>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2203      	movs	r2, #3
 80025b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	88fa      	ldrh	r2, [r7, #6]
 80025ce:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025f6:	d10f      	bne.n	8002618 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002606:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002616:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002622:	2b40      	cmp	r3, #64	@ 0x40
 8002624:	d007      	beq.n	8002636 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800263e:	d152      	bne.n	80026e6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <HAL_SPI_Transmit+0xee>
 8002648:	8b7b      	ldrh	r3, [r7, #26]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d145      	bne.n	80026da <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	881a      	ldrh	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	1c9a      	adds	r2, r3, #2
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002672:	e032      	b.n	80026da <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d112      	bne.n	80026a8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	881a      	ldrh	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	1c9a      	adds	r2, r3, #2
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80026a6:	e018      	b.n	80026da <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026a8:	f7fe f98a 	bl	80009c0 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d803      	bhi.n	80026c0 <HAL_SPI_Transmit+0x160>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026be:	d102      	bne.n	80026c6 <HAL_SPI_Transmit+0x166>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e082      	b.n	80027e0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1c7      	bne.n	8002674 <HAL_SPI_Transmit+0x114>
 80026e4:	e053      	b.n	800278e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_SPI_Transmit+0x194>
 80026ee:	8b7b      	ldrh	r3, [r7, #26]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d147      	bne.n	8002784 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	330c      	adds	r3, #12
 80026fe:	7812      	ldrb	r2, [r2, #0]
 8002700:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800271a:	e033      	b.n	8002784 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b02      	cmp	r3, #2
 8002728:	d113      	bne.n	8002752 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	330c      	adds	r3, #12
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002750:	e018      	b.n	8002784 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002752:	f7fe f935 	bl	80009c0 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d803      	bhi.n	800276a <HAL_SPI_Transmit+0x20a>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d102      	bne.n	8002770 <HAL_SPI_Transmit+0x210>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d109      	bne.n	8002784 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e02d      	b.n	80027e0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1c6      	bne.n	800271c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	6839      	ldr	r1, [r7, #0]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f8b0 	bl	80028f8 <SPI_EndRxTxTransaction>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2220      	movs	r2, #32
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80027de:	2300      	movs	r3, #0
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027f8:	f7fe f8e2 	bl	80009c0 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	4413      	add	r3, r2
 8002806:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002808:	f7fe f8da 	bl	80009c0 <HAL_GetTick>
 800280c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800280e:	4b39      	ldr	r3, [pc, #228]	@ (80028f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	015b      	lsls	r3, r3, #5
 8002814:	0d1b      	lsrs	r3, r3, #20
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800281e:	e054      	b.n	80028ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002826:	d050      	beq.n	80028ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002828:	f7fe f8ca 	bl	80009c0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	429a      	cmp	r2, r3
 8002836:	d902      	bls.n	800283e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d13d      	bne.n	80028ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800284c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002856:	d111      	bne.n	800287c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002860:	d004      	beq.n	800286c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800286a:	d107      	bne.n	800287c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800287a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002884:	d10f      	bne.n	80028a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e017      	b.n	80028ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4013      	ands	r3, r2
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	bf0c      	ite	eq
 80028da:	2301      	moveq	r3, #1
 80028dc:	2300      	movne	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d19b      	bne.n	8002820 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000000c 	.word	0x2000000c

080028f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2201      	movs	r2, #1
 800290c:	2102      	movs	r1, #2
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f7ff ff6a 	bl	80027e8 <SPI_WaitFlagStateUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291e:	f043 0220 	orr.w	r2, r3, #32
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e013      	b.n	8002952 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2200      	movs	r2, #0
 8002932:	2180      	movs	r1, #128	@ 0x80
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7ff ff57 	bl	80027e8 <SPI_WaitFlagStateUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e000      	b.n	8002952 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e093      	b.n	8002a96 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fd ff22 	bl	80007cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800299e:	f023 0307 	bic.w	r3, r3, #7
 80029a2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f000 f904 	bl	8002bbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029dc:	f023 0303 	bic.w	r3, r3, #3
 80029e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	4313      	orrs	r3, r2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80029fa:	f023 030c 	bic.w	r3, r3, #12
 80029fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	4313      	orrs	r3, r2
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	011a      	lsls	r2, r3, #4
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	031b      	lsls	r3, r3, #12
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002a38:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	4313      	orrs	r3, r2
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002aae:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ab6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002abe:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ac6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d110      	bne.n	8002af0 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d102      	bne.n	8002ada <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ad4:	7b7b      	ldrb	r3, [r7, #13]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d001      	beq.n	8002ade <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e069      	b.n	8002bb2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002aee:	e031      	b.n	8002b54 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d110      	bne.n	8002b18 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002af6:	7bbb      	ldrb	r3, [r7, #14]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d102      	bne.n	8002b02 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002afc:	7b3b      	ldrb	r3, [r7, #12]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d001      	beq.n	8002b06 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e055      	b.n	8002bb2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b16:	e01d      	b.n	8002b54 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d108      	bne.n	8002b30 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b1e:	7bbb      	ldrb	r3, [r7, #14]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d105      	bne.n	8002b30 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b24:	7b7b      	ldrb	r3, [r7, #13]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d102      	bne.n	8002b30 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b2a:	7b3b      	ldrb	r3, [r7, #12]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d001      	beq.n	8002b34 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e03e      	b.n	8002bb2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_Encoder_Start+0xc4>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d008      	beq.n	8002b72 <HAL_TIM_Encoder_Start+0xd4>
 8002b60:	e00f      	b.n	8002b82 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f894 	bl	8002c98 <TIM_CCxChannelCmd>
      break;
 8002b70:	e016      	b.n	8002ba0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	2104      	movs	r1, #4
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f88c 	bl	8002c98 <TIM_CCxChannelCmd>
      break;
 8002b80:	e00e      	b.n	8002ba0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2201      	movs	r2, #1
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f884 	bl	8002c98 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2201      	movs	r2, #1
 8002b96:	2104      	movs	r1, #4
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 f87d 	bl	8002c98 <TIM_CCxChannelCmd>
      break;
 8002b9e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a2f      	ldr	r2, [pc, #188]	@ (8002c8c <TIM_Base_SetConfig+0xd0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00b      	beq.n	8002bec <TIM_Base_SetConfig+0x30>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bda:	d007      	beq.n	8002bec <TIM_Base_SetConfig+0x30>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a2c      	ldr	r2, [pc, #176]	@ (8002c90 <TIM_Base_SetConfig+0xd4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <TIM_Base_SetConfig+0x30>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a2b      	ldr	r2, [pc, #172]	@ (8002c94 <TIM_Base_SetConfig+0xd8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d108      	bne.n	8002bfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a22      	ldr	r2, [pc, #136]	@ (8002c8c <TIM_Base_SetConfig+0xd0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00b      	beq.n	8002c1e <TIM_Base_SetConfig+0x62>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0c:	d007      	beq.n	8002c1e <TIM_Base_SetConfig+0x62>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a1f      	ldr	r2, [pc, #124]	@ (8002c90 <TIM_Base_SetConfig+0xd4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d003      	beq.n	8002c1e <TIM_Base_SetConfig+0x62>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a1e      	ldr	r2, [pc, #120]	@ (8002c94 <TIM_Base_SetConfig+0xd8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d108      	bne.n	8002c30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <TIM_Base_SetConfig+0xd0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d103      	bne.n	8002c64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f023 0201 	bic.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	611a      	str	r2, [r3, #16]
  }
}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800

08002c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	2201      	movs	r2, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	401a      	ands	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a1a      	ldr	r2, [r3, #32]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	621a      	str	r2, [r3, #32]
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e046      	b.n	8002d86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00e      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d44:	d009      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a12      	ldr	r2, [pc, #72]	@ (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a10      	ldr	r2, [pc, #64]	@ (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10c      	bne.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800

08002d9c <memset>:
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4402      	add	r2, r0
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d100      	bne.n	8002da6 <memset+0xa>
 8002da4:	4770      	bx	lr
 8002da6:	f803 1b01 	strb.w	r1, [r3], #1
 8002daa:	e7f9      	b.n	8002da0 <memset+0x4>

08002dac <__libc_init_array>:
 8002dac:	b570      	push	{r4, r5, r6, lr}
 8002dae:	2600      	movs	r6, #0
 8002db0:	4d0c      	ldr	r5, [pc, #48]	@ (8002de4 <__libc_init_array+0x38>)
 8002db2:	4c0d      	ldr	r4, [pc, #52]	@ (8002de8 <__libc_init_array+0x3c>)
 8002db4:	1b64      	subs	r4, r4, r5
 8002db6:	10a4      	asrs	r4, r4, #2
 8002db8:	42a6      	cmp	r6, r4
 8002dba:	d109      	bne.n	8002dd0 <__libc_init_array+0x24>
 8002dbc:	f000 f81a 	bl	8002df4 <_init>
 8002dc0:	2600      	movs	r6, #0
 8002dc2:	4d0a      	ldr	r5, [pc, #40]	@ (8002dec <__libc_init_array+0x40>)
 8002dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8002df0 <__libc_init_array+0x44>)
 8002dc6:	1b64      	subs	r4, r4, r5
 8002dc8:	10a4      	asrs	r4, r4, #2
 8002dca:	42a6      	cmp	r6, r4
 8002dcc:	d105      	bne.n	8002dda <__libc_init_array+0x2e>
 8002dce:	bd70      	pop	{r4, r5, r6, pc}
 8002dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd4:	4798      	blx	r3
 8002dd6:	3601      	adds	r6, #1
 8002dd8:	e7ee      	b.n	8002db8 <__libc_init_array+0xc>
 8002dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dde:	4798      	blx	r3
 8002de0:	3601      	adds	r6, #1
 8002de2:	e7f2      	b.n	8002dca <__libc_init_array+0x1e>
 8002de4:	08002e4c 	.word	0x08002e4c
 8002de8:	08002e4c 	.word	0x08002e4c
 8002dec:	08002e4c 	.word	0x08002e4c
 8002df0:	08002e50 	.word	0x08002e50

08002df4 <_init>:
 8002df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df6:	bf00      	nop
 8002df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfa:	bc08      	pop	{r3}
 8002dfc:	469e      	mov	lr, r3
 8002dfe:	4770      	bx	lr

08002e00 <_fini>:
 8002e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e02:	bf00      	nop
 8002e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e06:	bc08      	pop	{r3}
 8002e08:	469e      	mov	lr, r3
 8002e0a:	4770      	bx	lr
